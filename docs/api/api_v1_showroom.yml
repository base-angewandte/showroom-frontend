openapi: 3.0.0
info:
  title: 'Showroom API'
  description: 'Showroom API'
  version: 1.0.0
paths:
  /autocomplete:
    post:
      description: 'Exact string search matching titles (also subtitle?)'
      parameters:
        - name: q
          description: 'Search query string.'
          in: query
          schema:
            type: string
            minLength: 3
        - name: filter_name
          description: 'result category to return'
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        200:
          description: 'Returns an array of search results.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Autocomplete'

  /filter:
    get:
      description: 'Returns all possible filters for the search.'
      responses:
        200:
          description: 'Returns all possible filters for the search.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filter'
  /search:
    post:
      description: 'Returns all possible results.'
      parameters:
        - name: filter
          description: 'array of objects with all filters applied'
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CommonSearchFilter'
        - name: limit
          description: 'Number of results to return per page.'
          in: query
          schema:
            type: integer
            default: 5
        - name: offset
          description: 'The initial index to return the results.'
          in: query
          schema:
            type: integer
      responses:
        200:
          description: 'Returns an array of search results.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'

  /activities/{id}:
    get:
      description: 'Returns a single activity object.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Returns a single activity object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        404:
          description: "Activity not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /activities/{id}/media:
    get:
      description: 'Returns an array of media objects related to an specific activity.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Returns an array of media objects related to an specific activity.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        404:
          description: "Activity/Media not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /entities/{id}:
    get:
      description: 'Returns a single entity object.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Returns a single entity object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        404:
          description: "Entity not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      description: 'Partially update a certain entity; currently only for fields "secondary_details", "showcase"'
      parameters:
        - description: 'ID of entity to patch'
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
        description: 'Object with key/values to be partially changed'
        required: true
      responses:
        204:
          description: 'Successfully updated'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Invalid input'
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Unauthorized'
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Forbidden'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Not found'
        5XX:
          description: 'Unexpected error'

  /entities/{id}/activities:
    get:
      description: 'Returns array of activities related to an specific entity.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Returns array of activities related to an specific entity.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonList'
        404:
          description: "Entity/Activities not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: 'Update order and visibility of activities'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityActivitiesEdit'
        description: 'Request array with ordered objects'
        required: true
      responses:
        204:
          description: 'Successfully updated'
        400:
          description: 'Invalid input'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        5XX:
          description: 'Unexpected error'

  /entities/{id}/search:
    post:
      description: 'Returns all possible results of a specific entity, e.g. person.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: filter
          description: 'array of objects with all filters applied'
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CommonSearchFilter'
        - name: limit
          description: 'Number of results to return per page.'
          in: query
          schema:
            type: integer
            default: 5
        - name: offset
          description: 'The initial index from which to return the results.'
          in: query
          schema:
            type: integer
      responses:
        200:
          description: 'Returns an array of search results'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
        404:
          description: "Entity not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /albums/{id}:
    get:
      description: 'Returns a single album object.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Returns a single album object.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        404:
          description: "Album not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    #
    # Autocomplete
    #
    AutocompleteItem:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        subtext:
          type: array
          items:
            type: string
        source:
          type: string

    Autocomplete:
      type: array
      items:
        $ref: '#/components/schemas/AutocompleteItem'

    #
    # Activity
    #
    Activity:
      type: object
      properties:
        id:
          type: string
        date_changed:
          type: string
          format: date-time
        date_created:
          type: string
          format: date-time
        entries:
          type: object
          properties:
            media:
              type: array
              items:
                type: string
              description: 'List of linked media objects.'
            linked:
              type: object
              properties:
                parent:
                  type: array
                  items:
                    $ref: '#/components/schemas/SearchItem'
                children:
                  type: array
                  items:
                    $ref: '#/components/schemas/SearchItem'
        list:
          type: array
          items:
            $ref: '#/components/schemas/CommonList'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/CommonLocation'
        media:
          type: object
        primary_details:
          type: array
          items:
            $ref: '#/components/schemas/CommonText'
        secondary_details:
          type: array
          items:
            $ref: '#/components/schemas/CommonText'
        source_institution:
          $ref: '#/components/schemas/CommonSourceInstitution'
        subtext:
          type: array
          items:
            type: string
        title:
          type: string
          items:
            type: string
        type:
          type: string

    #
    # Entity
    #
    Entity:
      type: object
      properties:
        id:
          type: string
        date_changed:
          type: string
          format: date-time
        date_created:
          type: string
          format: date-time
        expertise:
          type: array
          items:
            type: string
        list:
          type: array
          items:
            $ref: '#/components/schemas/CommonList'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/CommonLocation'
        media:
          type: object
          description: 'used as cover media'
          oneOf:
            - $ref: '#/components/schemas/MediaAudio'
            - $ref: '#/components/schemas/MediaImage'
            - $ref: '#/components/schemas/MediaVideo'
            - $ref: '#/components/schemas/MediaDocument'
            - $ref: '#/components/schemas/MediaUndefined'
        primary_details:
          type: array
          items:
            $ref: '#/components/schemas/CommonText'
        secondary_details:
          type: array
          items:
            $ref: '#/components/schemas/CommonText'
        showcase:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/EntityShowcaseTypeAlbum'
              - $ref: '#/components/schemas/EntityShowcaseTypeActivity'
        source_institution:
          $ref: '#/components/schemas/CommonSourceInstitution'
        subtext:
          type: array
          items:
            type: string
        title:
          type: string
        type:
          type: string
          enum:
            - person
            - institution
            - department
          description: 'in future version should be configurable with cms - see issue #1121'

    # entityShowcase
    EntityShowcaseTypeActivity:
      type: object
      properties:
        id:
          type: string
        additional:
          type: string
        media:
          type: object
          allOf:
            - $ref: '#/components/schemas/EntityShowcaseMedia'
        showcase_type:
          type: string
          enum:
            - activity
        subtext:
          type: array
          items:
            type: string
        title:
          type: string
        type:
          type: string

    EntityShowcaseTypeAlbum:
      type: object
      properties:
        id:
          type: string
        media:
          type: array
          items:
            $ref: '#/components/schemas/EntityShowcaseMedia'
        showcase_type:
          type: string
          enum:
            - album
        title:
          type: string
        subtext:
          type: array
          items:
            type: string
        total:
          type: number

    EntityShowcaseMedia:
      type: array
      items:
        type: object
        minLength: 1
        maxLength: 4
      example:
        - 455w: string
        - 654w: string

    EntityActivitiesEdit:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          hidden:
            type: boolean

    #
    # Album
    #
    Album:
      type: object
      properties:
        id:
          type: string
        activities:
          type: array
          items:
            $ref: '#/components/schemas/SearchItem'
        title:
          type: string
        subtext:
          type: string
        secondary_details:
          type: array
          items:
            $ref: '#/components/schemas/CommonText'
        owner:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              source:
                type: string

    #
    # Media
    #
    Media:
      type: array
      items:
        type: object
        anyOf:
          - $ref: '#/components/schemas/MediaAudio'
          - $ref: '#/components/schemas/MediaDocument'
          - $ref: '#/components/schemas/MediaImage'
          - $ref: '#/components/schemas/MediaUndefined'
          - $ref: '#/components/schemas/MediaVideo'

    MediaImage:
      type: object
      properties:
        id:
          type: string
        alternative:
          $ref: '#/components/schemas/MediaAlternative'
        licence:
          $ref: '#/components/schemas/MediaLicence'
        original:
          type: string
          description: 'path to file'
        previews:
          description: 'return all generated size/sources'
          type: array
          items:
            type: object
        type:
          type: string
          enum:
            - i

    MediaAudio:
      type: object
      properties:
        id:
          type: string
        alternative:
          $ref: '#/components/schemas/MediaAlternative'
        licence:
          $ref: '#/components/schemas/MediaLicence'
        mp3:
          type: string
          description: 'listen.mp3'
        original:
          type: string
          description: 'path to file'
        type:
          type: string
          enum:
            - a

    MediaVideo:
      type: object
      properties:
        id:
          type: string
        cover:
          type: object
          properties:
            gif:
              type: string
            jpg:
              type: string
        playlist:
          type: string
          description: 'path to playlist.m3u8'
        original:
          type: string
          description: 'path to file'
        alternative:
          $ref: '#/components/schemas/MediaAlternative'
        licence:
          $ref: '#/components/schemas/MediaLicence'
        type:
          type: string
          enum:
            - v

    MediaDocument:
      type: object
      properties:
        id:
          type: string
        cover:
          type: object
          properties:
            gif:
              type: string
            jpg:
              type: string
        pdf:
          type: string
          description: 'path to file.pdf'
        original:
          type: string
          description: 'path to file'
        alternative:
          $ref: '#/components/schemas/MediaAlternative'
        licence:
          $ref: '#/components/schemas/MediaLicence'
        thumbnail:
          type: string
          description: ''
        type:
          type: string
          enum:
            - d

    MediaUndefined:
      type: object
      properties:
        id:
          type: string
        original:
          type: string
          description: 'path to file'
        alternative:
          $ref: '#/components/schemas/MediaAlternative'
        licence:
          $ref: '#/components/schemas/MediaLicence'
        type:
          type: string
          enum:
            - x

    MediaLicence:
      type: object
      properties:
        label:
          type: string
        source:
          type: string
          description: 'url to licences'

    MediaAlternative:
      type: array
      description: "return list of strings from meta data if available: eg; ['FileSize', 'ImageSize', 'Title', 'Artist', 'Year']"
      items:
        type: string

    #
    # Search
    #
    SearchItem:
      type: object
      properties:
        id:
          type: string
        alterntive_text:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              value:
                type: string
        mediaUrl:
          type: string
        source:
          type: string
          format: uri
        source_institution:
          $ref: '#/components/schemas/CommonSourceInstitution'
        score:
          type: number
        title:
          type: string
        type:
          type: string

    SearchAlbum:
      type: object
      properties:
        album:
          type: string
        total:
          description: 'total number of activities in that album'
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/SearchItem'

    Search:
      type: array
      items:
        $ref: '#/components/schemas/SearchAlbum'

    #
    # Filter
    #
    Filter:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/FilterType'
          - $ref: '#/components/schemas/FilterTypeOptions'

    FilterType:
      type: object
      required:
        - label
        - type
      properties:
        label:
          type: string
        type:
          type: string
          enum:
            - text
            - date
            - daterange

    FilterTypeOptions:
      type: object
      required:
        - label
        - type
        - options
      properties:
        label:
          type: string
        type:
          type: string
          enum:
            - chips
        options:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              label:
                type: string

    #
    # Common
    #

    # List
    CommonList:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        hidden:
          type: boolean
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/CommonList'
              - $ref: '#/components/schemas/CommonListItem'
      example:
        label: string
        hidden: boolean
        data:
          - attributes:
              - string
            value: string
            id: string
          - label: string
            data:
              - attributes:
                  - string
                value: string
                id: string

    CommonListItem:
      type: object
      properties:
        attributes:
          type: array
          items:
            type: string
        value:
          type: string
        id:
          type: string

    ## Location
    CommonLocation:
      type: object
      properties:
        lat_long:
          type: array
          items:
            type: string
        address:
          type: array
          items:
            type: string

    ## TextList
    CommonText:
      type: object
      properties:
        label:
          type: string
        data:
          type: string
          anyOf:
            - $ref: '#/components/schemas/CommonTextString'
            - $ref: '#/components/schemas/CommonTextArray'
            - $ref: '#/components/schemas/CommonTextObject'

    CommonTextString:
      type: string

    CommonTextArray:
      type: array
      items:
        type: string

    CommonTextObject:
      type: object
      required:
        - label
        - value
      properties:
        label:
          type: string
        value:
          type: string
        url:
          type: string
          format: uri
        source:
          type: string

    ## SourceInstitution
    CommonSourceInstitution:
      type: object
      properties:
        label:
          type: string
        url:
          type: string
          format: uri
        icon:
          type: string
          format: uri

    ## SearchFilter
    CommonSearchFilter:
      type: object
      properties:
        name:
          type: string
        filter_values:
          items:
            oneOf:
              - $ref: '#/components/schemas/CommonSearchFilterText'
              - $ref: '#/components/schemas/CommonSearchFilterDate'
              - $ref: '#/components/schemas/CommonSearchFilterDateRange'
              - $ref: '#/components/schemas/CommonSearchFilterChips'
        type:
          type: string
          enum:
            - text
            - date
            - daterange
            - chips

    CommonSearchFilterText:
      type: string

    CommonSearchFilterDateRange:
      type: object
      properties:
        from:
          type: string
          format:
            date
        to:
          type: string
          format:
            date

    CommonSearchFilterDate:
      type: string
      format:
        date

    CommonSearchFilterChips:
      type: object
      properties:
        label:
          type: string
        id:
          type: string

    ## Error
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
