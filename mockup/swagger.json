{
  "openapi": "3.0.0",
  "info": {
    "title": "Showroom API",
    "description": "Showroom API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:9001",
      "description": "Local Mockup Server"
    }
  ],
  "tags": [
    {
      "name": "public",
      "description": "Methods that can be used by the frontend without authentication."
    },
    {
      "name": "auth",
      "description": "Methods that can only be used by authenticated users"
    },
    {
      "name": "repo",
      "description": "Methods that are reserved for backend repositories to keep showroom content synchronized"
    }
  ],
  "paths": {
    "/autocomplete/": {
      "post": {
        "description": "Exact string search matching titles.",
        "operationId": "api_v1_autocomplete_create",
        "tags": [
          "public"
        ],
        "parameters": [
          {
            "name": "q",
            "description": "Search query string.",
            "in": "query",
            "schema": {
              "type": "string",
              "minLength": 3
            }
          },
          {
            "name": "filter_name",
            "description": "result category to return",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autocomplete"
                }
              }
            }
          }
        }
      }
    },
    "/filters/": {
      "get": {
        "description": "Returns all possible filters for the search.",
        "operationId": "api_v1_filters_list",
        "tags": [
          "public"
        ],
        "responses": {
          "200": {
            "description": "Returns all possible filters for the search.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          }
        }
      }
    },
    "/search/": {
      "post": {
        "description": "Returns all possible results.",
        "operationId": "api_v1_search_create",
        "tags": [
          "public"
        ],
        "parameters": [
          {
            "name": "filter",
            "description": "Array of objects with all filters applied",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CommonSearchFilter"
              }
            }
          },
          {
            "name": "limit",
            "description": "Number of results to return per page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 5
            }
          },
          {
            "name": "offset",
            "description": "The initial index to return the results.",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Search"
                }
              }
            }
          }
        }
      }
    },
    "/activities/": {
      "post": {
        "description": "Create one or more activities. If an activity already exists, it will be updated with the new values.",
        "operationId": "api_v1_activities_create",
        "tags": [
          "repo"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "All items successfully created/updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "array",
                      "description": "List of newly created activities. Empty if none.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The original id of the repository entry."
                          },
                          "showroom_id": {
                            "type": "integer",
                            "description": "The new showroom id of this activity."
                          }
                        }
                      }
                    },
                    "updated": {
                      "type": "array",
                      "description": "List of updated activities. Empty if none.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The original id of the repository entry."
                          },
                          "showroom_id": {
                            "type": "integer",
                            "description": "Showroom id of the updated activity."
                          }
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "description": "List of errors when creating/updating certain activities. Empty if none.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The original id of the repository entry."
                          },
                          "detail": {
                            "type": "string",
                            "description": "Description of the error when trying to create/update this activity."
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "created",
                    "updated",
                    "errors"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{id}/": {
      "get": {
        "description": "Returns a single activity object.",
        "operationId": "api_v1_activities_retrieve",
        "tags": [
          "public"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single activity object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "404": {
            "description": "Activity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the activity",
        "operationId": "api_v1_activities_destroy",
        "tags": [
          "repo"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found"
          }
        }
      }
    },
    "/activities/{id}/media/": {
      "get": {
        "description": "Returns an array of media objects related to an specific activity.",
        "operationId": "api_v1_activities_media_list",
        "tags": [
          "public"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of media objects related to an specific activity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Media"
                }
              }
            }
          },
          "404": {
            "description": "Activity/Media not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/": {
      "post": {
        "description": "Create one or more entities. If an entity already exists, it will be updated with the new values.",
        "operationId": "api_v1_entities_create",
        "tags": [
          "repo"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Entity"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "All entities successfully created/updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "integer",
                      "description": "Number of newly created entities."
                    },
                    "updated": {
                      "type": "integer",
                      "description": "Number of updated entities."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/{id}/": {
      "get": {
        "description": "Returns a single entity object.",
        "operationId": "api_v1_entities_retrieve",
        "tags": [
          "public"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single entity object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Partially update a certain entity; currently only for fields \"secondary_details\", \"showcase\"",
        "operationId": "api_v1_entities_partial_update",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "description": "ID of entity to patch",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Entity"
              }
            }
          },
          "description": "Object with key/values to be partially changed",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      },
      "delete": {
        "description": "Delete the entity",
        "operationId": "api_v1_entities_destroy",
        "tags": [
          "repo"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found"
          }
        }
      }
    },
    "/entities/{id}/list/": {
      "get": {
        "description": "Returns array of activities related to a specific entity.",
        "operationId": "api_v1_entities_list_retrieve",
        "tags": [
          "public"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns array of activities related to an specific entity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonList"
                }
              }
            }
          },
          "404": {
            "description": "Entity/Activities not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update order and visibility of activities",
        "operationId": "api_v1_entities_list_partial_update",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityActivitiesEdit"
              }
            }
          },
          "description": "Request array with ordered objects",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully updated"
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/entities/{id}/edit/": {
      "get": {
        "description": "Returns user-editable information from a specific field of an entity, in all available languages.",
        "operationId": "api_v1_entities_edit_retrieve",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field",
            "in": "query",
            "required": true,
            "description": "Defines which user-editable field from the entity model should be requested. This currently can be either \"secondary_details\" or \"showcase\"\n",
            "schema": {
              "type": "string",
              "enum": [
                "secondary_details",
                "showcase"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of the items in the user-editable field that was requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityEdit"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Entity/Activities not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "(Fully) Update user-editable information of an entity",
        "operationId": "api_v1_entities_edit_update",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "field",
            "in": "query",
            "required": true,
            "description": "Defines which user-editable field from the entity model should be updated. This currently can be either \"secondary_details\" or \"showcase\"\n",
            "schema": {
              "type": "string",
              "enum": [
                "secondary_details",
                "showcase"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityEdit"
              }
            }
          },
          "description": "Request array with ordered objects",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully updated"
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/entities/{id}/search/": {
      "post": {
        "description": "Returns all possible results of a specific entity, e.g. person.",
        "operationId": "api_v1_entities_search_create",
        "tags": [
          "public"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "array of objects with all filters applied",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CommonSearchFilter"
              }
            }
          },
          {
            "name": "limit",
            "description": "Number of results to return per page.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 5
            }
          },
          {
            "name": "offset",
            "description": "The initial index to return the results.",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Search"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/albums/": {
      "post": {
        "operationId": "api_v1_albums_create",
        "description": "Create an album belonging to the authenticated user",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Album"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Album was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Album"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/albums/{id}/": {
      "get": {
        "description": "Returns a single album object.",
        "operationId": "api_v1_albums_retrieve",
        "tags": [
          "public"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single album object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Album"
                }
              }
            }
          },
          "404": {
            "description": "Album not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "description": "Update the album",
        "operationId": "api_v1_albums_partial_update",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "Successfully updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found"
          }
        }
      },
      "delete": {
        "description": "Delete the album",
        "operationId": "api_v1_albums_destroy",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found"
          }
        }
      }
    },
    "/media/": {
      "post": {
        "description": "Create one or more media. If one already exists, it will be updated with the new values.",
        "operationId": "api_v1_media_create",
        "tags": [
          "repo"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Media"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "All media successfully created/updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "integer",
                      "description": "Number of newly created media."
                    },
                    "updated": {
                      "type": "integer",
                      "description": "Number of updated media."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/media/{id}/": {
      "delete": {
        "description": "Delete the media entry",
        "operationId": "api_v1_media_destroy",
        "tags": [
          "repo"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AutocompleteDataItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "subtext": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "source": {
            "type": "string"
          }
        }
      },
      "AutocompleteItem": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "example": "person"
          },
          "label": {
            "type": "string",
            "example": "Person"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutocompleteDataItem"
            }
          }
        }
      },
      "Autocomplete": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AutocompleteItem"
        }
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date_changed": {
            "type": "string",
            "format": "date-time"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "entries": {
            "type": "object",
            "properties": {
              "media": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of linked media objects."
              },
              "linked": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SearchItem"
                    }
                  },
                  "to": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SearchItem"
                    }
                  }
                }
              }
            }
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommonList"
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommonLocation"
            }
          },
          "featured_media": {
            "$ref": "#/components/schemas/CommonFeaturedMedia"
          },
          "primary_details": {
            "$ref": "#/components/schemas/CommonTextList"
          },
          "publisher": {
            "$ref": "#/components/schemas/CommonPublisher"
          },
          "secondary_details": {
            "$ref": "#/components/schemas/CommonTextList"
          },
          "source_institution": {
            "$ref": "#/components/schemas/CommonSourceInstitution"
          },
          "subtext": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date_changed": {
            "type": "string",
            "format": "date-time"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "expertise": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommonList"
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommonLocation"
            }
          },
          "featured_media": {
            "$ref": "#/components/schemas/CommonFeaturedMedia"
          },
          "primary_details": {
            "$ref": "#/components/schemas/CommonTextList"
          },
          "secondary_details": {
            "$ref": "#/components/schemas/CommonTextList"
          },
          "showcase": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EntityShowcaseTypeAlbum"
                },
                {
                  "$ref": "#/components/schemas/EntityShowcaseTypeActivity"
                }
              ]
            }
          },
          "source_institution": {
            "$ref": "#/components/schemas/CommonSourceInstitution"
          },
          "subtext": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "person",
              "institution",
              "department"
            ],
            "description": "Future version should be configurable with cms - see issue #1121"
          }
        }
      },
      "EntityShowcaseTypeActivity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "additional": {
            "type": "string"
          },
          "media": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityShowcaseMedia"
              }
            ]
          },
          "showcase_type": {
            "type": "string",
            "enum": [
              "activity"
            ]
          },
          "subtext": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "EntityShowcaseTypeAlbum": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityShowcaseMedia"
            }
          },
          "showcase_type": {
            "type": "string",
            "enum": [
              "album"
            ]
          },
          "title": {
            "type": "string"
          },
          "subtext": {
            "type": "string"
          },
          "total": {
            "type": "number"
          }
        }
      },
      "EntityShowcaseMedia": {
        "type": "array",
        "items": {
          "type": "object",
          "minLength": 1,
          "maxLength": 4
        },
        "example": [
          {
            "455w": "path to file"
          },
          {
            "654w": "path to file"
          }
        ]
      },
      "EntityEdit": {
        "type": "array",
        "items": {
          "type": "object",
          "title": "CommonTextTranslation",
          "properties": {
            "en": {
              "$ref": "#/components/schemas/CommonTextList"
            },
            "de": {
              "$ref": "#/components/schemas/CommonTextList"
            },
            "xx": {
              "$ref": "#/components/schemas/CommonTextList"
            }
          }
        },
        "description": "Contains all translations of the contents of a user-editable field (like secondary_details or showcase). Every item of this list is an object containing all available ISO 2 letter codes as properties, holding the list of CommonText objects to be translated as values.\n"
      },
      "EntityActivitiesEdit": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "hidden": {
              "type": "boolean"
            }
          }
        }
      },
      "Album": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchItem"
            }
          },
          "title": {
            "type": "string"
          },
          "subtext": {
            "type": "string"
          },
          "secondary_details": {
            "$ref": "#/components/schemas/CommonTextList"
          },
          "publisher": {
            "$ref": "#/components/schemas/CommonPublisher"
          }
        }
      },
      "Media": {
        "type": "array",
        "items": {
          "type": "object",
          "anyOf": [
            {
              "$ref": "#/components/schemas/MediaAudio"
            },
            {
              "$ref": "#/components/schemas/MediaDocument"
            },
            {
              "$ref": "#/components/schemas/MediaImage"
            },
            {
              "$ref": "#/components/schemas/MediaUndefined"
            },
            {
              "$ref": "#/components/schemas/MediaVideo"
            }
          ]
        }
      },
      "MediaImage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "alternative": {
            "$ref": "#/components/schemas/MediaAlternative"
          },
          "licence": {
            "$ref": "#/components/schemas/MediaLicence"
          },
          "original": {
            "type": "string",
            "format": "uri"
          },
          "previews": {
            "description": "Return all generated size/sources.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "i"
            ]
          }
        }
      },
      "MediaAudio": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "alternative": {
            "$ref": "#/components/schemas/MediaAlternative"
          },
          "licence": {
            "$ref": "#/components/schemas/MediaLicence"
          },
          "duration": {
            "type": "string"
          },
          "mp3": {
            "type": "string",
            "format": "uri"
          },
          "original": {
            "type": "string",
            "format": "uri"
          },
          "type": {
            "type": "string",
            "enum": [
              "a"
            ]
          }
        }
      },
      "MediaVideo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "cover": {
            "type": "object",
            "properties": {
              "gif": {
                "type": "string",
                "format": "uri"
              },
              "jpg": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "playlist": {
            "type": "string",
            "format": "uri",
            "description": "path to playlist.m3u8"
          },
          "original": {
            "type": "string",
            "format": "uri"
          },
          "alternative": {
            "$ref": "#/components/schemas/MediaAlternative"
          },
          "licence": {
            "$ref": "#/components/schemas/MediaLicence"
          },
          "type": {
            "type": "string",
            "enum": [
              "v"
            ]
          }
        }
      },
      "MediaDocument": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "cover": {
            "type": "object",
            "properties": {
              "gif": {
                "type": "string",
                "format": "uri"
              },
              "jpg": {
                "type": "string",
                "format": "uri"
              }
            }
          },
          "pdf": {
            "type": "string",
            "format": "uri",
            "description": "path to file.pdf"
          },
          "original": {
            "type": "string",
            "format": "uri"
          },
          "alternative": {
            "$ref": "#/components/schemas/MediaAlternative"
          },
          "licence": {
            "$ref": "#/components/schemas/MediaLicence"
          },
          "thumbnail": {
            "type": "string",
            "description": ""
          },
          "type": {
            "type": "string",
            "enum": [
              "d"
            ]
          }
        }
      },
      "MediaUndefined": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "original": {
            "type": "string",
            "format": "uri"
          },
          "alternative": {
            "$ref": "#/components/schemas/MediaAlternative"
          },
          "licence": {
            "$ref": "#/components/schemas/MediaLicence"
          },
          "type": {
            "type": "string",
            "enum": [
              "x"
            ]
          }
        }
      },
      "MediaLicence": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "source": {
            "type": "string",
            "format": "uri",
            "description": "url to licence page"
          }
        }
      },
      "MediaAlternative": {
        "type": "array",
        "description": "return list of strings from meta data if available: eg; ['FileSize', 'ImageSize', 'Title', 'Artist', 'Year']",
        "items": {
          "type": "string"
        }
      },
      "SearchItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "alternative_text": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "media_url": {
            "type": "string",
            "format": "uri",
            "description": "size: thumbnail"
          },
          "source_institution": {
            "$ref": "#/components/schemas/CommonSourceInstitution"
          },
          "score": {
            "type": "number"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "SearchResults": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "A string describing the result set (e.g. \"Most recent Activities\")"
          },
          "total": {
            "description": "Total number of activities in that album.",
            "type": "number"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchItem"
            }
          }
        }
      },
      "Search": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SearchResults"
        }
      },
      "Filter": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/FilterType"
            },
            {
              "$ref": "#/components/schemas/FilterTypeOptions"
            }
          ]
        },
        "example": [
          {
            "label": "string",
            "type": "text"
          },
          {
            "label": "string",
            "type": "date"
          },
          {
            "label": "string",
            "type": "daterange"
          },
          {
            "label": "string",
            "type": "chips",
            "options": [
              {
                "label": "string",
                "id": "string"
              }
            ]
          }
        ]
      },
      "FilterType": {
        "type": "object",
        "required": [
          "label",
          "type"
        ],
        "properties": {
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "date",
              "daterange"
            ]
          }
        }
      },
      "FilterTypeOptions": {
        "type": "object",
        "required": [
          "label",
          "type",
          "options"
        ],
        "properties": {
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "chips"
            ]
          },
          "freetext_allowed": {
            "type": "boolean"
          },
          "autocomplete_url": {
            "type": "string",
            "format": "uri"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CommonList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CommonList"
                },
                {
                  "$ref": "#/components/schemas/CommonListItem"
                }
              ]
            }
          }
        },
        "example": {
          "label": "string",
          "hidden": "boolean",
          "data": [
            {
              "attributes": [
                "string"
              ],
              "value": "string",
              "id": "string"
            },
            {
              "label": "string",
              "data": [
                {
                  "attributes": [
                    "string"
                  ],
                  "value": "string",
                  "id": "string"
                }
              ]
            }
          ]
        }
      },
      "CommonListItem": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "value": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "CommonLocation": {
        "type": "object",
        "properties": {
          "coordinates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "coordinates": [
            "16.384510",
            "48.208370"
          ],
          "data": [
            "Oskar Kokoschka-Platz 2",
            "1010 Wien",
            "Austria"
          ]
        }
      },
      "CommonFeaturedMedia": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/MediaAudio"
          },
          {
            "$ref": "#/components/schemas/MediaImage"
          },
          {
            "$ref": "#/components/schemas/MediaVideo"
          },
          {
            "$ref": "#/components/schemas/MediaDocument"
          },
          {
            "$ref": "#/components/schemas/MediaUndefined"
          }
        ]
      },
      "CommonTextList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CommonText"
        },
        "description": "An array of text objects that will be rendered by the [BaseTextList](https://base-angewandte.github.io/base-ui-components/#basetextlist) component.\n",
        "example": [
          {
            "label": "string",
            "data": "string"
          },
          {
            "label": "string",
            "data": [
              "string",
              "string"
            ]
          },
          {
            "label": "string",
            "data": [
              {
                "label": "string",
                "value": "string"
              },
              {
                "label": "string",
                "value": "string",
                "url": "https://www.domain.com",
                "source": "string"
              },
              {
                "label": "string",
                "value": "string",
                "url": "mailto:name@domain.com",
                "source": "string"
              }
            ]
          }
        ]
      },
      "CommonText": {
        "type": "object",
        "title": "CommonText",
        "properties": {
          "label": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "anyOf": [
              {
                "$ref": "#/components/schemas/CommonTextString"
              },
              {
                "$ref": "#/components/schemas/CommonTextArray"
              },
              {
                "$ref": "#/components/schemas/CommonTextObject"
              }
            ]
          },
          "language": {
            "type": "object",
            "description": "This property will only be set, if the requested language could not be found",
            "properties": {
              "iso": {
                "type": "string",
                "description": "The ISO 2 letter code for the language this content was returned in"
              },
              "label": {
                "type": "object",
                "properties": {
                  "en": {
                    "type": "string"
                  },
                  "de": {
                    "type": "string"
                  },
                  "xx": {
                    "type": "string"
                  }
                },
                "description": "Contains all available translations of the label that should be used if the language of the content is to be rendered.\n"
              }
            }
          }
        },
        "required": [
          "label",
          "data"
        ]
      },
      "CommonTextString": {
        "type": "string"
      },
      "CommonTextArray": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "CommonTextObject": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "label",
            "value"
          ],
          "properties": {
            "label": {
              "type": "string",
              "description": "A label to prefix the value, including a colon. In the format \"label: value\". If empty, only the value should be put on the line by itself, like \"value\".\n"
            },
            "value": {
              "type": "string",
              "description": "The value to be displayed"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "description": "A clickable link for this value"
            },
            "source": {
              "type": "string",
              "description": "An internal identifier, e.g. of an entity or activity"
            }
          }
        }
      },
      "CommonSourceInstitution": {
        "description": "relevant if more ",
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "name of institution"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "url to institution / institutions showroom page"
          },
          "icon": {
            "type": "string",
            "format": "uri",
            "description": "path to media file"
          }
        }
      },
      "CommonSearchFilter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "filter_values": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CommonSearchFilterText"
                },
                {
                  "$ref": "#/components/schemas/CommonSearchFilterDate"
                },
                {
                  "$ref": "#/components/schemas/CommonSearchFilterDateRange"
                },
                {
                  "$ref": "#/components/schemas/CommonSearchFilterChips"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "date",
              "daterange",
              "chips"
            ]
          }
        }
      },
      "CommonPublisher": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Firstname Lastname"
            },
            "source": {
              "type": "string",
              "description": "showroom id"
            }
          }
        }
      },
      "CommonSearchFilterText": {
        "type": "string"
      },
      "CommonSearchFilterDateRange": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "CommonSearchFilterDate": {
        "type": "string",
        "format": "date"
      },
      "CommonSearchFilterChips": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "detail"
        ],
        "properties": {
          "detail": {
            "type": "string"
          }
        }
      }
    }
  }
}
